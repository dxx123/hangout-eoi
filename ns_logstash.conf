input{
  lumberjack {
    port => 5043
    #type => "logs"
    ssl_certificate => "/Users/jacky/Downloads/logstash-2.3.2/logstash-forwarder.crt"
    ssl_key => "/Users/jacky/Downloads/logstash-2.3.2/logstash-forwarder.key"
  }
}

filter{
  if [type] == "applog" {
    multiline {
      pattern=>"^\["
      negate => true
      what =>previous
      stream_identity => "%{host}.%{path}.%{file}.%{type}"
    }
    grok{
      match =>{"file"=>"((?<yeareoi>(?<=\.)\d{4})(?<montheoi>\d{2})(?<dayeoi>\d{2}))"}
    }
    grok{
      match=>{"message"=>"\[%{SPACE}(\]|%{WORD:no}\]) (?<time>\d+:\d+:\d+):(?<sss>\d+) (?<word>\b.*?(?=:\b))\:%{NUMBER:no2} %{WORD}\:%{NUMBER:PID} %{WORD}\:%{NUMBER:SID}%{SPACE}\[%{LOGLEVEL:loglevel}%{SPACE}?\](?<tempdata>.*[^\r\n])"}
      add_field=>{"datetime"=>"%{yeareoi}-%{montheoi}-%{dayeoi} %{time}.%{sss}"}
    }
    grok{
      match=>{"message"=>"Process\[\w+\] (?<process>.*)"}
    }  
  }

  if [type] == "pltlog" {
    multiline {
      pattern=>"^\["
      negate => true
      what =>previous
      stream_identity => "%{host}.%{path}.%{file}.%{type}"
    }
    grok{
        match =>{"file"=>"((?<yeareoi>(?<=\.)\d{4})(?<montheoi>\d{2})(?<dayeoi>\d{2}))"}
    }
    grok{
      match=>{"message"=>"\[%{SPACE}(\]|%{WORD:no}\]) (?<time>\d+:\d+:\d+):(?<sss>\d+) (?<word>\b.*?(?=:\b))\:%{NUMBER:no2} %{WORD}\:%{NUMBER:PID} %{WORD}\:%{NUMBER:SID}%{SPACE}\[%{LOGLEVEL:loglevel}%{SPACE}?\](?<tempdata>.*[^\r\n])"}
      add_field =>{"datetime"=>"%{yeareoi}-%{montheoi}-%{dayeoi} %{time}.%{sss}"}
    }

    if "</" in [tempdata]{
      grok{
        match=>{"tempdata" => "((<(\w*:)?serialNo>)(?<serialNo>\w+)(</(\w*:)?serialNo>))"}
      }
      grok{
        match=>{"tempdata" => "((<(\w*:)?phoneNum>)(?<phoneNum>\w+)(</(\w*:)?phoneNum>))"}
      }
      grok{
        match=>{"tempdata" => "((<(\w*:)?customerNo>)(?<customerNo>\w+)(</(\w*:)?customerNo>))"}
      }
      grok{
        match=>{"tempdata" => "((<(\w*:)?cardNo>)(?<cardNo>\w+)(</(\w*:)?cardNo>))"}
      }
      grok{
        match=>{"tempdata" => "((<(\w*:)?responseCode>)(?<responseCode>\w+)(</(\w*:)?responseCode>))"}
      }
      grok{
        match=>{"tempdata" => "((<(\w*:)?responseMessage>)(?<responseMessage>\w+)(</(\w*:)?responseMessage>))"}
      }
      grok{
        match=>{"tempdata" => "((<(\w*:)?transCode>)(?<transCode>\w+)(</(\w*:)?transCode>))"}
      }
    }
    if "<?xml" in [tempdata]{
      grok{
        match=>{"tempdata" =>"(?<request>(<\?.*[^\]]))"}
      }
      xml {
        source=>"request"
        target=>"doc"
      }
    }else if "soap:Envelope" in [tempdata]{
      grok{
        match=>{"tempdata" =>"(?<request>(<.*[^\]]))"}
      }
      xml {
        source=>"request"
        target=>"rec"
      }
    }
  }

  if [type] == "per" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what =>previous
      stream_identity => "%{host}.%{path}.%{file}.%{type}"
    }

    grok{
      match=>{"message" =>"%{TIMESTAMP_ISO8601:datetime} \[%{LOGLEVEL:loglevel}\s?\] (?<tempdata>(.*))"}
    }
    if[loglevel]=="INFO"{
      mutate {
        gsub=>["tempdata"," ","|"]
        split=>{"tempdata"=>"|"}
      }
    }
  }
  if [type] == "pmobile" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what =>previous
      stream_identity => "%{host}.%{path}.%{file}.%{type}"
    }

    grok{
      match=>{"message" =>"%{TIMESTAMP_ISO8601:datetime} \[%{LOGLEVEL:loglevel}\s?\] (?<tempdata>(.*))"}
    }
    if[loglevel]=="INFO"{
      mutate {
        gsub=>["tempdata"," ","|"]
        split=>{"tempdata"=>"|"}
      }
    }
  }
  if [type] == "router" {
    multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what =>previous
      stream_identity => "%{host}.%{path}.%{file}.%{type}"
    }
    grok{
      match=>{"message" =>"%{TIMESTAMP_ISO8601:datetime} \[%{LOGLEVEL:loglevel}\s?\] (?<tempdata>(.*))"}
    }
    if [loglevel]=="TRACE"{
      grok{
        match=>{"tempdata" => "((<(\w*:)?serialNo>)(?<serialNo>\w+)(</(\w*:)?serialNo>))"}
      }
      grok{
        match=>{"tempdata" => "((<(\w*:)?phoneNum>)(?<phoneNum>\w+)(</(\w*:)?phoneNum>))"}
      }
      grok{
        match=>{"tempdata" => "((<(\w*:)?customerNo>)(?<customerNo>\w+)(</(\w*:)?customerNo>))"}
      }
      grok{
        match=>{"tempdata" => "((<(\w*:)?cardNo>)(?<cardNo>\w+)(</(\w*:)?cardNo>))"}
      }
      grok{
        match=>{"tempdata" => "((<(\w*:)?responseCode>)(?<responseCode>\w+)(</(\w*:)?responseCode>))"}
      }
      grok{
        match=>{"tempdata" => "((<(\w*:)?responseMessage>)(?<responseMessage>\w+)(</(\w*:)?responseMessage>))"}
      }
      grok{
        match=>{"tempdata" => "((<(\w*:)?transCode>)(?<transCode>\w+)(</(\w*:)?transCode>))"}
      }
      if [tempdata]=~"<?xml"{
        if [tempdata]=~"for request"{
          grok{
            match=>{"tempdata" =>"(?<response>(?<=\[)<\?[^\]]*(?=\]))](\s*\w*)*\[?(?<request>(?<=\[)<\?[^\]]*(?=\]))"}
          }
          xml {
            source=>"request"
            target=>"req"
          }
          xml {
            source=>"response"
            target=>"res"
          }
        }else {
          grok{
            match=>{"tempdata" =>"(?<request>(?<=\[)<\?[^\]]*(?=\]))"}
          }
          xml {
            source=>"request"
            target=>"sendreq"
          }
        }
      }
    }
  }
  date{
    match => ["datetime", "YYYY-MM-dd HH:mm:ss.SSS"]
    target => "datetime"
  }
  mutate {
    remove_field => [ "tempdata"]
  }
}
output{
  stdout{codec=>rubydebug}
    elasticsearch {
        hosts =>"10.20.39.34:9200"
        index =>"nsh4-%{type}"
        document_type=>"%{type}"
        workers =>2
        flush_size =>2000
        idle_flush_time=>10
        template_overwrite =>true
  }
}
